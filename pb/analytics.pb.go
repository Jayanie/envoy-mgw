// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: analytics.proto

package analytics

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AnalyticsStreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageStreamName      string `protobuf:"bytes,1,opt,name=messageStreamName,proto3" json:"messageStreamName,omitempty"`
	MetaClientType         string `protobuf:"bytes,2,opt,name=meta_clientType,json=metaClientType,proto3" json:"meta_clientType,omitempty"`
	ApplicationConsumerKey string `protobuf:"bytes,3,opt,name=applicationConsumerKey,proto3" json:"applicationConsumerKey,omitempty"`
	ApplicationName        string `protobuf:"bytes,4,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	ApplicationId          string `protobuf:"bytes,5,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
	ApplicationOwner       string `protobuf:"bytes,6,opt,name=applicationOwner,proto3" json:"applicationOwner,omitempty"`
	ApiContext             string `protobuf:"bytes,7,opt,name=apiContext,proto3" json:"apiContext,omitempty"`
	ApiName                string `protobuf:"bytes,8,opt,name=apiName,proto3" json:"apiName,omitempty"`
	ApiVersion             string `protobuf:"bytes,9,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	ApiResourcePath        string `protobuf:"bytes,10,opt,name=apiResourcePath,proto3" json:"apiResourcePath,omitempty"`
	ApiResourceTemplate    string `protobuf:"bytes,11,opt,name=apiResourceTemplate,proto3" json:"apiResourceTemplate,omitempty"`
	ApiMethod              string `protobuf:"bytes,12,opt,name=apiMethod,proto3" json:"apiMethod,omitempty"`
	ApiCreator             string `protobuf:"bytes,13,opt,name=apiCreator,proto3" json:"apiCreator,omitempty"`
	ApiCreatorTenantDomain string `protobuf:"bytes,14,opt,name=apiCreatorTenantDomain,proto3" json:"apiCreatorTenantDomain,omitempty"`
	ApiTier                string `protobuf:"bytes,15,opt,name=apiTier,proto3" json:"apiTier,omitempty"`
	ApiHostname            string `protobuf:"bytes,16,opt,name=apiHostname,proto3" json:"apiHostname,omitempty"`
	Username               string `protobuf:"bytes,17,opt,name=username,proto3" json:"username,omitempty"`
	UserTenantDomain       string `protobuf:"bytes,18,opt,name=userTenantDomain,proto3" json:"userTenantDomain,omitempty"`
	UserIp                 string `protobuf:"bytes,19,opt,name=userIp,proto3" json:"userIp,omitempty"`
	UserAgent              string `protobuf:"bytes,20,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	RequestTimestamp       int64  `protobuf:"varint,21,opt,name=requestTimestamp,proto3" json:"requestTimestamp,omitempty"`
	ThrottledOut           bool   `protobuf:"varint,22,opt,name=throttledOut,proto3" json:"throttledOut,omitempty"`
	ResponseTime           int64  `protobuf:"varint,23,opt,name=responseTime,proto3" json:"responseTime,omitempty"`
	ServiceTime            int64  `protobuf:"varint,24,opt,name=serviceTime,proto3" json:"serviceTime,omitempty"`
	BackendTime            int64  `protobuf:"varint,25,opt,name=backendTime,proto3" json:"backendTime,omitempty"`
	ResponseCacheHit       bool   `protobuf:"varint,26,opt,name=responseCacheHit,proto3" json:"responseCacheHit,omitempty"`
	ResponseSize           int64  `protobuf:"varint,27,opt,name=responseSize,proto3" json:"responseSize,omitempty"`
	Protocol               string `protobuf:"bytes,28,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ResponseCode           int32  `protobuf:"varint,29,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	Destination            string `protobuf:"bytes,30,opt,name=destination,proto3" json:"destination,omitempty"`
	SecurityLatency        int64  `protobuf:"varint,31,opt,name=securityLatency,proto3" json:"securityLatency,omitempty"`
	ThrottlingLatency      int64  `protobuf:"varint,32,opt,name=throttlingLatency,proto3" json:"throttlingLatency,omitempty"`
	RequestMedLat          int64  `protobuf:"varint,33,opt,name=requestMedLat,proto3" json:"requestMedLat,omitempty"`
	ResponseMedLat         int64  `protobuf:"varint,34,opt,name=responseMedLat,proto3" json:"responseMedLat,omitempty"`
	BackendLatency         int64  `protobuf:"varint,35,opt,name=backendLatency,proto3" json:"backendLatency,omitempty"`
	OtherLatency           int64  `protobuf:"varint,36,opt,name=otherLatency,proto3" json:"otherLatency,omitempty"`
	GatewayType            string `protobuf:"bytes,37,opt,name=gatewayType,proto3" json:"gatewayType,omitempty"`
	Label                  string `protobuf:"bytes,38,opt,name=label,proto3" json:"label,omitempty"`
	Subscriber             string `protobuf:"bytes,39,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
	ThrottledOutReason     string `protobuf:"bytes,40,opt,name=throttledOutReason,proto3" json:"throttledOutReason,omitempty"`
	ThrottledOutTimestamp  int64  `protobuf:"varint,41,opt,name=throttledOutTimestamp,proto3" json:"throttledOutTimestamp,omitempty"`
	Hostname               string `protobuf:"bytes,42,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ErrorCode              string `protobuf:"bytes,43,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	ErrorMessage           string `protobuf:"bytes,44,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
}

func (x *AnalyticsStreamMessage) before(info *interface{}) error {
	panic("implement me")
}

func (x *AnalyticsStreamMessage) after(info *interface{}) {
	panic("implement me")
}

func (x *AnalyticsStreamMessage) Reset() {
	*x = AnalyticsStreamMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsStreamMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsStreamMessage) ProtoMessage() {}

func (x *AnalyticsStreamMessage) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsStreamMessage.ProtoReflect.Descriptor instead.
func (*AnalyticsStreamMessage) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsStreamMessage) GetMessageStreamName() string {
	if x != nil {
		return x.MessageStreamName
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetMetaClientType() string {
	if x != nil {
		return x.MetaClientType
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApplicationConsumerKey() string {
	if x != nil {
		return x.ApplicationConsumerKey
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApplicationOwner() string {
	if x != nil {
		return x.ApplicationOwner
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiContext() string {
	if x != nil {
		return x.ApiContext
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiName() string {
	if x != nil {
		return x.ApiName
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiResourcePath() string {
	if x != nil {
		return x.ApiResourcePath
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiResourceTemplate() string {
	if x != nil {
		return x.ApiResourceTemplate
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiMethod() string {
	if x != nil {
		return x.ApiMethod
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiCreator() string {
	if x != nil {
		return x.ApiCreator
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiCreatorTenantDomain() string {
	if x != nil {
		return x.ApiCreatorTenantDomain
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiTier() string {
	if x != nil {
		return x.ApiTier
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetApiHostname() string {
	if x != nil {
		return x.ApiHostname
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetUserTenantDomain() string {
	if x != nil {
		return x.UserTenantDomain
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetRequestTimestamp() int64 {
	if x != nil {
		return x.RequestTimestamp
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetThrottledOut() bool {
	if x != nil {
		return x.ThrottledOut
	}
	return false
}

func (x *AnalyticsStreamMessage) GetResponseTime() int64 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetServiceTime() int64 {
	if x != nil {
		return x.ServiceTime
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetBackendTime() int64 {
	if x != nil {
		return x.BackendTime
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetResponseCacheHit() bool {
	if x != nil {
		return x.ResponseCacheHit
	}
	return false
}

func (x *AnalyticsStreamMessage) GetResponseSize() int64 {
	if x != nil {
		return x.ResponseSize
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetSecurityLatency() int64 {
	if x != nil {
		return x.SecurityLatency
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetThrottlingLatency() int64 {
	if x != nil {
		return x.ThrottlingLatency
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetRequestMedLat() int64 {
	if x != nil {
		return x.RequestMedLat
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetResponseMedLat() int64 {
	if x != nil {
		return x.ResponseMedLat
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetBackendLatency() int64 {
	if x != nil {
		return x.BackendLatency
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetOtherLatency() int64 {
	if x != nil {
		return x.OtherLatency
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetGatewayType() string {
	if x != nil {
		return x.GatewayType
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetSubscriber() string {
	if x != nil {
		return x.Subscriber
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetThrottledOutReason() string {
	if x != nil {
		return x.ThrottledOutReason
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetThrottledOutTimestamp() int64 {
	if x != nil {
		return x.ThrottledOutTimestamp
	}
	return 0
}

func (x *AnalyticsStreamMessage) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *AnalyticsStreamMessage) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_analytics_proto protoreflect.FileDescriptor

var file_analytics_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81,
	0x0d, 0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x70, 0x69, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70,
	0x69, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x69, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x69, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x54, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x54, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x69, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x4c,
	0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x64, 0x4c, 0x61, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x15, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x5a, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x17, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x42, 0x34,
	0x0a, 0x23, 0x6f, 0x72, 0x67, 0x2e, 0x77, 0x73, 0x6f, 0x32, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x6d, 0x67, 0x77, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x01, 0x5a, 0x0b, 0x2e, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analytics_proto_rawDescOnce sync.Once
	file_analytics_proto_rawDescData = file_analytics_proto_rawDesc
)

func file_analytics_proto_rawDescGZIP() []byte {
	file_analytics_proto_rawDescOnce.Do(func() {
		file_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(file_analytics_proto_rawDescData)
	})
	return file_analytics_proto_rawDescData
}

var file_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_analytics_proto_goTypes = []interface{}{
	(*AnalyticsStreamMessage)(nil), // 0: AnalyticsStreamMessage
	(*empty.Empty)(nil),            // 1: google.protobuf.Empty
}
var file_analytics_proto_depIdxs = []int32{
	0, // 0: AnalyticsSendService.sendAnalytics:input_type -> AnalyticsStreamMessage
	1, // 1: AnalyticsSendService.sendAnalytics:output_type -> google.protobuf.Empty
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_analytics_proto_init() }
func file_analytics_proto_init() {
	if File_analytics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analytics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsStreamMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analytics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analytics_proto_goTypes,
		DependencyIndexes: file_analytics_proto_depIdxs,
		MessageInfos:      file_analytics_proto_msgTypes,
	}.Build()
	File_analytics_proto = out.File
	file_analytics_proto_rawDesc = nil
	file_analytics_proto_goTypes = nil
	file_analytics_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnalyticsSendServiceClient is the client API for AnalyticsSendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalyticsSendServiceClient interface {
	SendAnalytics(ctx context.Context, opts ...grpc.CallOption) (AnalyticsSendService_SendAnalyticsClient, error)
}

type analyticsSendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsSendServiceClient(cc grpc.ClientConnInterface) AnalyticsSendServiceClient {
	return &analyticsSendServiceClient{cc}
}

func (c *analyticsSendServiceClient) SendAnalytics(ctx context.Context, opts ...grpc.CallOption) (AnalyticsSendService_SendAnalyticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AnalyticsSendService_serviceDesc.Streams[0], "/AnalyticsSendService/sendAnalytics", opts...)
	if err != nil {
		return nil, err
	}
	x := &analyticsSendServiceSendAnalyticsClient{stream}
	return x, nil
}

type AnalyticsSendService_SendAnalyticsClient interface {
	Send(*AnalyticsStreamMessage) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type analyticsSendServiceSendAnalyticsClient struct {
	grpc.ClientStream
}

func (x *analyticsSendServiceSendAnalyticsClient) Send(m *AnalyticsStreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analyticsSendServiceSendAnalyticsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyticsSendServiceServer is the server API for AnalyticsSendService service.
type AnalyticsSendServiceServer interface {
	SendAnalytics(AnalyticsSendService_SendAnalyticsServer) error
}

// UnimplementedAnalyticsSendServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnalyticsSendServiceServer struct {
}

func (*UnimplementedAnalyticsSendServiceServer) SendAnalytics(AnalyticsSendService_SendAnalyticsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendAnalytics not implemented")
}

func RegisterAnalyticsSendServiceServer(s *grpc.Server, srv AnalyticsSendServiceServer) {
	s.RegisterService(&_AnalyticsSendService_serviceDesc, srv)
}

func _AnalyticsSendService_SendAnalytics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalyticsSendServiceServer).SendAnalytics(&analyticsSendServiceSendAnalyticsServer{stream})
}

type AnalyticsSendService_SendAnalyticsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*AnalyticsStreamMessage, error)
	grpc.ServerStream
}

type analyticsSendServiceSendAnalyticsServer struct {
	grpc.ServerStream
}

func (x *analyticsSendServiceSendAnalyticsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analyticsSendServiceSendAnalyticsServer) Recv() (*AnalyticsStreamMessage, error) {
	m := new(AnalyticsStreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AnalyticsSendService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AnalyticsSendService",
	HandlerType: (*AnalyticsSendServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendAnalytics",
			Handler:       _AnalyticsSendService_SendAnalytics_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "analytics.proto",
}
